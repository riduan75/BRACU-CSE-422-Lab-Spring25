{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"-7z283kzYRBh"},"outputs":[],"source":["import heapq\n","from collections import defaultdict\n","\n","class Graph:\n","    def __init__(self):\n","        self.adjacency_list = defaultdict(dict)\n","\n","    def add_edge(self, node1, node2, cost=0):\n","        self.adjacency_list[node1][node2] = cost\n","        self.adjacency_list[node2][node1] = cost\n","\n","    def get_neighbors(self, node):\n","        return self.adjacency_list.get(node, {}).items()\n","\n","def a_star(graph, start, goal, heuristics):\n","    open_set = [(0, start)]\n","    came_from = {}\n","    cost_so_far = {start: 0}\n","\n","    while open_set:\n","        current = heapq.heappop(open_set)\n","\n","        if current == goal:\n","            return reconstruct_path(came_from, start, goal), cost_so_far[goal]\n","\n","        for neighbor, move_cost in graph.get_neighbors(current):\n","            new_cost = cost_so_far[current] + move_cost\n","\n","            if new_cost < cost_so_far.get(neighbor, float('inf')):\n","                cost_so_far[neighbor] = new_cost\n","                priority = new_cost + heuristics.get(neighbor, 0)\n","                heapq.heappush(open_set, (priority, neighbor))\n","                came_from[neighbor] = current\n","\n","    return None, float('inf')\n","\n","def reconstruct_path(came_from, start, goal):\n","    path = []\n","    current = goal\n","    while current in came_from:\n","        path.append(current)\n","        current = came_from[current]\n","    path.append(start)\n","    return list(reversed(path))\n","\n","def load_graph_from_file(filename):\n","    graph = Graph()\n","    heuristics = {}\n","\n","    with open(filename, 'r') as file:\n","        for line in file:\n","            data = line.strip().split()\n","            node, h_value = data[0], int(data[1])\n","            heuristics[node] = h_value\n","            for i in range(2, len(data), 2):\n","                graph.add_edge(node, data[i], int(data[i + 1]))\n","\n","    return graph, heuristics\n","\n","if __name__ == '__main__':\n","    graph, heuristics = load_graph_from_file(\"/content/input.txt\")\n","\n","    start = input(\"Start Node: \")\n","    goal = input(\"Goal Node: \")\n","\n","    path, total_cost = a_star(graph, start, goal, heuristics)\n","\n","    if path:\n","        print(f\"Path found: {' -> '.join(path)}\")\n","        print(f\"Total Cost: {total_cost} km\")\n","    else:\n","        print(\"No path found.\")\n"]}]}